global
    {%if hconfigs['log_level']!="CRITICAL"%}
    # # Access logs
    # #log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tcc\ %Tw/%Tc/%Tr/%Ta\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r
    # option httplog
    # option http-server-close
    # option forwardfor except 127.0.0.1  # Add X-Forwarded-For header except for HAProxy itself
    # log /opt/hiddify/hiddify-manager/log/system/haproxy.log local0

    log /opt/hiddify-manager/log/system/haproxy.err.log local0 warning
        
    {%endif%}



defaults
    log global
    retry-on all-retryable-errors

    timeout connect 5s
    timeout client 50s
    timeout client-fin 50s
    timeout server 50s
    timeout tunnel 1h
    default-server init-addr none
    default-server inter 15s fastinter 2s downinter 5s rise 3 fall 3
    mode tcp
    #tune.h2.initial-window-size 536870912
    #tune.h2.max-concurrent-streams 512

### standalone stats page
listen stats
        # accessible at http://192.168.1.100/haproxy?stats
        bind 127.0.0.1:8181
      	
      	option httplog
      	stats enable
      	stats admin if TRUE
      	stats refresh 5m

frontend https-in
    bind :443,:::443 v4v6 tfo 
    {% for port in hconfigs['tls_ports'].split(",")%}
    bind :{{port}},:::{{port}} v4v6 tfo 
    {%endfor%}
    # option tcplog
    # option dontlognull
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    acl tls1_2 req.ssl_ver 3.3
    acl tls1_3 req.ssl_ver 3.4
    
    acl alpnh2 req.ssl_alpn h2 
    
    
    acl is_cdn src -f /opt/hiddify-manager/haproxy/cloudflare.lst -f /opt/hiddify-manager/haproxy/arvan.lst -f /opt/hiddify-manager/haproxy/cloudfront.lst
    use_backend to_https_in_ssl if is_cdn
    
    {%for d in domain if d['mode']=='sub_link_only'%} 
    use_backend to_panel_only if { hdr(host) -i {{d['domain']}} }
    {%endfor%}
        
    {% for d in domains if d['internal_port_reality'] and d['grpc'] %}
    {%set domain=d['domain']%}
    {%set port=d['internal_port_reality']%}
    use_backend reality_grpc_{{port}} if { hdr(host) -i {{domain}}  }
    {%endfor%}

    {% for d in domains if d['internal_port_reality'] and not d['grpc'] %}
    {%set domain=d['domain']%}
    {%set port=d['internal_port_reality']%}
    use_backend reality_{{port}} if { hdr(host) -i {{domain}}  }
    {%endfor%}


        
    {%if hconfigs['ssfaketls_enable'] and hconfigs['ssfaketls_fakedomain'] %}
    use_backend ssfake if { hdr(host) -i {{hconfigs['ssfaketls_fakedomain']}}  }
    {%endif%}
        
        
    {%if hconfigs['telegram_enable'] and hconfigs['telegram_fakedomain'] %}
    use_backend telegram if { hdr(host) -i {{hconfigs['telegram_fakedomain']}} }
    {%endif%}

    {%if hconfigs['shadowtls_enable'] and hconfigs['shadowtls_fakedomain']%}
    use_backend shadowtls if { hdr(host) -i {{hconfigs['shadowtls_fakedomain'] }} } 
    {%endif%}
        
    {% for d in domains if d['mode']=='old_xtls_direct' %}
    use_backend xray_force if { hdr(host) -i {{d['domain']}}  }
    {%endfor%}

    #use_backend to_https_in_ssl_h2 if alpnh2
    default_backend to_https_in_ssl
    

backend to_https_in_ssl
    server haproxy abns@https_in_ssl send-proxy-v2 tfo
backend to_https_in_ssl_h2
    server haproxy abns@https_in_ssl_h2 send-proxy-v2 tfo

# backend to_https_in_ssl
# #     server xray abns@https_in_ssl send-proxy-v2

frontend onlypanel_in
    mode http
    bind abns@onlypanel_in accept-proxy ssl crt /opt/hiddify-manager/ssl/ alpn h2,http/1.1,h3

    
    acl hpanel path_reg ^/{{hconfigs['proxy_path']}}/[1-9a-f][1-9a-f]
    use_backend hiddifypanel if hpanel

    default_backend nginx_dispatcher_http

backend to_panel_only
    server to_panel_only abns@onlypanel_in send-proxy-v2



frontend http-https-in
    bind :80,:::80 v4v6 tfo #proto h2 
    {% for port in hconfigs['http_ports'].split(",")%}
    bind :{{port}},:::{{port}} v4v6 tfo
    {%endfor%}
    bind abns@https_in_ssl tfo accept-proxy ssl crt /opt/hiddify-manager/ssl/ alpn h2,http/1.1,h3 allow-0rtt
    acl h2 ssl_fc_alpn -i h2
    #acl h2 ssl_fc_npn -i h2
    

    #bind quic4@abns@https_in_ssl accept-proxy ssl crt /opt/hiddify-manager/ssl/ alpn h3    
    # http-response set-header alt-svc "h3=\":443\";ma=900;"
    tcp-request inspect-delay 5s
    tcp-request content accept if HTTP

    
    {% include '/opt/hiddify-manager/haproxy/common_h1h2rules.lst.pj2' %}

    {%if hconfigs['tcp_enable']%}
    use_backend vmesst if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_tcp'] }} }
    use_backend vlesst if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_tcp'] }} }
    use_backend  v2rayt if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_tcp'] }} }
    use_backend trojant if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_tcp'] }} }
    {%endif%}


    {%if hconfigs['ws_enable']%}
    use_backend vmessw if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_ws'] }} }
    use_backend vlessw if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_ws'] }} }
    use_backend v2rayw if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_ws'] }} }
    use_backend trojanw if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_ws'] }} }
    {%endif%}

    {%if hconfigs['httpupgrade_enable']%}
    use_backend vmesshu if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_httpupgrade'] }} }
    use_backend vlesshu if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_httpupgrade'] }} }
    # use_backend v2rayhu if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_httpupgrade'] }} }
    use_backend trojanhu if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_httpupgrade'] }} }
    {%endif%}

    {%if hconfigs['splithttp_enable']%}
    use_backend vmesshs if { path_beg /{{ hconfigs['path_vmess'] }}{{ hconfigs['path_splithttp'] }}1 }
    use_backend vlesshs if { path_beg /{{ hconfigs['path_vless'] }}{{ hconfigs['path_splithttp'] }}1 }
    #use_backend v2rayhs if { path_beg /{{ hconfigs['path_ss'] }}{{ hconfigs['path_splithttp'] }}1 }
    use_backend trojanhs if { path_beg /{{ hconfigs['path_trojan'] }}{{ hconfigs['path_splithttp'] }}1 }
    {%endif%}

    use_backend nginx_dispatcher_h2 if h2


    

    

    
    default_backend nginx_dispatcher

# this server handles xray http2 proxies
backend nginx_dispatcher_h2
    server nginx unix@/opt/hiddify-manager/nginx/run/h2.sock send-proxy-v2 tfo

# this server doesn't handle any proxy
backend nginx_dispatcher
    server nginx unix@/opt/hiddify-manager/nginx/run/h1.sock send-proxy-v2 tfo

backend nginx_dispatcher_http
    mode http
    server nginx unix@/opt/hiddify-manager/nginx/run/h1.sock send-proxy-v2 tfo










backend decoy
    server xraydecoy abns@xtlsindecoy send-proxy-v2

backend tgdecoy
    server tgdecoy {{hconfigs['telegram_fakedomain']}}

backend tgdecoy_http
    
    server tgdecoy_http {{hconfigs['telegram_fakedomain']}}

backend telegram
    server telegram 127.0.0.1:1001

{%if hconfigs['ssfaketls_enable'] and hconfigs['ssfaketls_fakedomain'] %}
backend ssdecoy_http
    server ssdecoy {{hconfigs['ssfaketls_fakedomain']}}
backend ssfake
    server ssfake 127.0.0.1:1010 tfo
{%endif%}









{%if hconfigs['shadowtls_enable'] and hconfigs['shadowtls_fakedomain']%}
backend shadowtls_decoy_http
    server shadowtls_decoy_http {{hconfigs['shadowtls_fakedomain']}}
backend shadowtls_decoy
    server shadowtls_decoy {{hconfigs['shadowtls_fakedomain']}}
{%endif%}

# backend ssrdecory
#     server ssrdecoy ssrtlsdomain
# backend ssr
#     server ssr 127.0.0.1:1004


backend xray_force
    # server xray unix@/dev/shm/hiddify-xtls-main.sock
    server xray abns@xtlsin send-proxy-v2


backend hiddifypanel
    mode http
    http-request set-header X-Forwarded-For %[src]
    server hpanel 127.0.0.1:9000




{% for d in domains if d['internal_port_reality'] and d['grpc'] %}
    {%set domain=d['domain']%}
    {%set port=d['internal_port_reality']%}
backend reality_grpc_http_{{port}}
    mode http
    server reality_{{port}} {{domain}}:80 
{%endfor%}

{% for d in domains if d['internal_port_reality'] and not d['grpc'] %}
    {%set domain=d['domain']%}
    {%set port=d['internal_port_reality']%}
backend reality_http_{{port}}
    mode http
    server reality_{{port}} {{domain}}:80 
{%endfor%}




backend shadowtls
    server singbox 127.0.0.1:1030 tfo 


backend v2rayw
  server v2rayw 127.0.0.1:1020  tfo 

backend v2rayw_h2
  server v2rayw 127.0.0.1:1020  tfo 


